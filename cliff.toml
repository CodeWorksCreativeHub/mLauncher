# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# Changelog\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}](<REPO>/tree/{{ version }}) - ({{ timestamp | date(format="%d, %B %Y") }})
{% else %}\
    ## [Coming Soon](<REPO>/tree/HEAD)
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- Generated by DroidWorks Studio -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/DroidWorksStudio/mLauncher" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers
    { pattern = "\\(#([0-9]+)\\)", replace = "([#${1}](<REPO>/issues/${1}))"},
    # Replace Merge pull requests
    { pattern = "Merge pull request #([0-9]+) from [^ ]+", replace = "PR # [${1}](<REPO>/pull/${1}):"},
    # Replace Signed-off-by
    { pattern = "Signed-off-by: HeCodes2Much <wayne6324@gmail.com>", replace = ""},
    { pattern = "Signed-off-by: The-Repo-Club <wayne6324@gmail.com>", replace = ""}
    # Check spelling of the commit with https://github.com/crate-ci/typos
    # If the spelling is incorrect, it will be automatically fixed.
    # { pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->Implemented Enhancements:" },
    { message = "^Feat", group = "<!-- 0 -->Implemented Enhancements:" },
    { message = "^fix|^bug", group = "<!-- 1 -->Bug Fixes:" },
    { message = "^Fix|^Bug", group = "<!-- 1 -->Bug Fixes:" },
    { message = "^lang", group = "<!-- 2 -->Language Support:" },
    { message = "^Lang", group = "<!-- 2 -->Language Support:" },
    { message = "^doc", group = "<!-- 3 -->Documentation:" },
    { message = "^Doc", group = "<!-- 3 -->Documentation:" },
    { message = "^perf", group = "<!-- 4 -->Performance:" },
    { message = "^Perf", group = "<!-- 4 -->Performance:" },
    { message = "^refactor", group = "<!-- 5 -->Refactor:" },
    { message = "^Refactor", group = "<!-- 5 -->Refactor:" },
    { message = "^style", group = "<!-- 6 -->Styling:" },
    { message = "^Style", group = "<!-- 6 -->Styling:" },
    { message = "^test", group = "<!-- 7 -->Testing:" },
    { message = "^Test", group = "<!-- 7 -->Testing:" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore|^ci", group = "<!-- 8 -->Miscellaneous Tasks:" },
    { message = "^Chore|^CI", group = "<!-- 8 -->Miscellaneous Tasks:" },
    { message = "^security", group = "<!-- 9 -->Security:" },
    { message = "^Security", group = "<!-- 9 -->Security:" },
    { message = "^revert", group = "<!-- 10 -->Revert:" },
    { message = "^Revert", group = "<!-- 10 -->Revert:" },
    { message = "^release", group = "<!-- 11 -->Release:" },
    { message = "^Release", group = "<!-- 11 -->Release:" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "[0-9].*"
# regex for skipping tags
# skip_tags = ""
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# limit the number of commits included in the changelog.
limit_commits = 250